@page "/catalog-student"
@using FSEBACKEND.Models
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject BlazorApp.Services.UserState UserState

<style>
    /* Main container for the entire page */
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden; /* Prevent page scrolling */
        font-family: Arial, sans-serif;
    }

    /* Top Bar (Header) */
    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Space between logo and user info */
        background-color: #1d1d1d; /* Dark gray */
        color: white;
        padding: 10px 20px; /* Increased padding */
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2); /* Added shadow */
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px; /* Small logo for the top bar */
        width: auto;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    /* Page Container */
    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar a.active {
        background-color: #ddd; /* Highlight the active link */
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    /* Content Area */
    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow: hidden; /* Prevent area from scrolling; inner sections will scroll */
        position: relative;
    }

    /* Hero Section */
    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    /* Book Cards Section */
    .features {
        flex: 1;
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto; /* Make books section scrollable */
        overflow-x: hidden;
        padding: 10px;
        height: calc(100% - 140px); /* Adjust height so it ends above the Add Book button */
        margin-bottom: 20px; /* Space above Add Book button */
        box-shadow: inset 0 2px 5px rgba(0,0,0,0.1); /* Subtle inner shadow for distinction */
    }

    .feature-card {
        flex: 1 1 calc(25% - 20px); /* Match requests card width */
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 25px; /* Match requests card padding */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        animation: fadeIn 0.5s ease-in-out;
        max-height: 300px; /* Limit the maximum height of the card */
        overflow: hidden; /* Hide overflow content */
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Ensure button is near the bottom */
    }

    .feature-card:hover {
        transform: scale(1.03); /* Match requests card hover effect */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .feature-card h3 {
        font-size: 1.5em; /* Match requests card title size */
        color: #333;
        margin-bottom: 10px;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .feature-card p {
        font-size: 1em; /* Match requests card text size */
        color: #555;
        margin-bottom: 10px;
        text-shadow: none; /* Remove shadows from paragraph text */
    }

    .feature-card button {
        width: 100%; /* Stretch button to match card width */
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #28a745; /* Standardize to green */
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        margin-top: auto; /* Push the button to the bottom */
    }

    .feature-card button:hover {
        transform: scale(1.05);
        background-color: #218838; /* Darker green on hover */
    }

    .filter-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .filter-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.2s ease;
        width: 140px; /* Ensures all buttons are the same size */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }
</style>

<div class="main-container">
    <!-- Top Bar -->
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home-student">BookTech Digital</a>
        </div>
        <span>Logged in as: Student</span>
    </div>

    <!-- Page Container -->
    <div class="page_container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div>
                <a href="/home-student">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-student">Catalog</a>
                <a href="/requests-student">Requests</a>
                <a href="/user-student">User</a> 
                <a href="/challan-student">Challan</a>
                <a href="/student-review">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Hero Section -->
            <div class="hero">
                <h1>Book Catalog</h1>
                <p>Explore our collection. Request a book to borrow it.</p>
            </div>

            <!-- Books Listing -->
            <div class="features">
                @if (books is not null && books.Any())
                {
                    @foreach (var book in books)
                    {
                        <div class="feature-card">
                            <h3>@book.BookName</h3>
                            <p><strong>Author:</strong> @book.WriteName</p>
                            <p><strong>Published:</strong> @book.PublishDate</p>
                            <button @onclick="() => RequestBook(book)">Request Book</button>
                        </div>
                    }
                }
                else
                {
                    <p>No books found.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Book> books = new List<Book>();
    private string currentUserEmail = string.Empty; // Initialize as an empty string

    protected override async Task OnInitializedAsync()
    {
        currentUserEmail = UserState.Email ?? "unknown@example.com"; // Initialize here
        books = await Http.GetFromJsonAsync<List<Book>>("http://localhost:5000/books") ?? new List<Book>();
    }

    private async Task RequestBook(Book book)
    {
        var request = new Request(book.Id.ToString(), currentUserEmail, false); // Use initialized value
        var response = await Http.PostAsJsonAsync("http://localhost:5000/addrequest", request);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Request for \"{book.BookName}\" submitted successfully!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to submit the book request.");
        }
    }

    public record Request(string BookId, string Email, bool Accepted);

    private void Logout()
    {
        UserState.ClearUser();
        NavigationManager.NavigateTo("/login");
    }
}