@page "/review-admin"
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject BlazorApp.Services.UserState UserState
@inject HttpClient Http
@implements IDisposable
@using System.Net.Http.Json

<!-- Reuse your existing styles -->
<style>
    /* Main container for the entire page */
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    /* Top Bar (Header) */
    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Space between logo and user info */
        background-color: #1d1d1d; /* Dark gray */
        color: white;
        padding: 10px 20px; /* Increased padding */
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2); /* Added shadow */
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px; /* Small logo for the top bar */
        width: auto;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    /* Page Container */
    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    /* Content Area */
    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
    }

    /* Hero Section */
    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    /* Feature Cards */
    .features {
        display: flex;
        flex-direction: column; /* Stack cards vertically */
        gap: 15px; /* Add consistent spacing between cards */
        margin-top: 20px;
    }

    .card-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 15px; /* Add consistent spacing between cards */
        overflow-y: auto; /* Allow vertical scrolling */
        overflow-x: hidden;
        padding: 10px;
        margin-bottom: 20px;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle inner shadow for distinction */
    }

    .feature-card {
        width: 100%; /* Full width of the container */
        min-height: 160px; /* Ensure a consistent minimum height */
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px; /* Add padding for content */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column; /* Align content vertically */
        justify-content: center; /* Center content vertically */
        animation: fadeIn 0.5s ease-in-out;
    }

    .feature-card h3 {
        font-size: 1.5em;
        color: #333;
        margin-bottom: 10px;
        margin-top: 10px;
    }

    .feature-card p {
        font-size: 1em;
        color: #555;
        margin: 5px 0;
    }
</style>

<div class="main-container">
    <!-- Top Bar -->
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home">BookTech Digital</a>
        </div>
        <span>Logged in as: Admin</span>
    </div>

    <!-- Page Container -->
    <div class="page_container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div>
                <a href="/home-admin">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-admin">Catalog</a>
                <a href="/requests-admin">Requests</a>
                <a href="/users-admin">Users</a>
                <a href="/challan-admin">Challan</a>
                <a class="active" href="/review-admin">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
            <div class="hero">
                <h1>Admin Dashboard - Reviews</h1>
                <p>View and moderate all user reviews.</p>
            </div>

            <div class="card-container">
                @if (IsLoading)
                {
                    <p>Loading reviews...</p>
                }
                else if (Reviews.Count == 0)
                {
                    <p>No reviews found.</p>
                }
                else
                {
                    @foreach (var review in Reviews)
                    {
                        <div class="feature-card">
                            <h3>@review.bookName</h3>
                            <p><strong>User:</strong> @review.writerName</p>
                            <p><strong>Rating:</strong> @review.rating/5</p>
                            <p><strong>Comment:</strong> @review.comment</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ReviewModel> Reviews = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        IsLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<ReviewModel>>("http://localhost:5000/admin/reviews");
            Reviews = response ;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load reviews: {ex.Message}");
        }
        IsLoading = false;
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    public class ReviewModel
    {

        public int reviewId { get; set; }
        public int bookId { get; set; }
        public string bookName { get; set; }
        public string writerName { get; set; }
        public string comment { get; set; }
        public int rating { get; set; }
    }
}
