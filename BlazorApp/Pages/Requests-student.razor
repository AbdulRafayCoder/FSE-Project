@page "/requests-student"
@using FSEBACKEND.Models
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BlazorApp.Services.UserState UserState
@inject IJSRuntime JS

<style>
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #1d1d1d;
        color: white;
        padding: 10px 20px;
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar a.active {
        background-color: #ddd;
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
        position: relative;
    }

    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    .filter-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .filter-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.2s ease;
        width: 120px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .filter-buttons button.pending {
        background: linear-gradient(135deg, #ffc107, #e0a800);
        color: white;
    }

    .filter-buttons button.pending:hover {
        transform: scale(1.05);
    }

    .filter-buttons button.accepted {
        background: linear-gradient(135deg, #28a745, #218838);
        color: white;
    }

    .filter-buttons button.accepted:hover {
        transform: scale(1.05);
    }

    .requests-container {
        flex: 1;
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 10px;
        height: calc(100% - 140px);
        margin-bottom: 20px;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .request-card {
        flex: 1 1 calc(25% - 20px);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 25px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        animation: fadeIn 0.5s ease-in-out;
        max-height: 300px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .request-card:hover {
        transform: scale(1.03);
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    .request-card h3 {
        font-size: 1.5em;
        color: #333;
        margin-bottom: 10px;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .request-card p {
        font-size: 1em;
        color: #555;
        margin-bottom: 10px;
        text-shadow: none;
    }

    .request-card button {
        width: 100%;
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #28a745;
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        margin-top: auto;
    }

    .request-card button:hover {
        transform: scale(1.05);
        background-color: #218838;
    }

    .request-card button.pending-display {
        width: 100%;
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #ffc107;
        color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .request-card button.return-display {
        width: 100%;
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: red;
        color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .request-card button.pending-display:hover {
        transform: scale(1.05);
        background-color: #e0a800;
    }
</style>

<div class="main-container">
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home-student">BookTech Digital</a>
        </div>
        <span>Logged in as: Student</span>
    </div>

    <div class="page_container">
        <div class="sidebar">
            <div>
                <a href="/home-student">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-student">Catalog</a>
                <a class="active" href="/requests-student">Requests</a>
                <a href="/user-student">User</a>
                <a href="/challan-student">Challan</a>
                <a href="/student-review">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <div class="content-area">
            <div class="hero">
                <h1>Borrowing Requests</h1>
                <p>Review all book borrowing requests.</p>
            </div>

            <div class="filter-buttons">
                <button class="pending" @onclick="ShowPendingRequests">Pending</button>
                <button class="accepted" @onclick="ShowAcceptedRequests">Accepted</button>
            </div>

            <div class="requests-container">
                @if (filteredRequests != null && filteredRequests.Any())
                {
                    @foreach (var req in filteredRequests)
                    {
                        <div class="request-card">
                            <h3>Book: @req.BookName</h3>
                            <p><strong>User:</strong> @req.UserEmail</p>
                            <p><strong>Status:</strong> @(req.Accepted ? "Accepted" : "Pending")</p>
                            @if (!req.Accepted)
                            {
                                <button class="pending-display" disabled>Pending</button>
                            }
                            else
                            {
                                <button class="return-display" @onclick="() => ReturnBook(req.requestId)">Return</button>
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No requests found.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<RequestModel> requests = new List<RequestModel>();
    private List<RequestModel> filteredRequests = new List<RequestModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
        ShowPendingRequests();
    }

    private async Task LoadRequests()
    {
        requests = await Http.GetFromJsonAsync<List<RequestModel>>($"http://localhost:5000/requests/{UserState.Email}") 
                   ?? new List<RequestModel>();
    }

    private void ShowPendingRequests()
    {
        filteredRequests = requests.Where(r => !r.Accepted).ToList();
    }

    private void ShowAcceptedRequests()
    {
        filteredRequests = requests.Where(r => r.Accepted).ToList();
    }

    public class RequestModel
    {
        public int requestId { get; set; }
        public int BookId { get; set; }
        public string BookName { get; set; } = string.Empty;
        public string UserEmail { get; set; } = string.Empty;
        public bool Accepted { get; set; }
    }

    private async Task ReturnBook(int requestId)
    {
        var response = await Http.PutAsJsonAsync($"http://localhost:5000/lend/return/{requestId}", (object)null);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Book has been returned successfully!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to return the book.");
        }
    }

    private void Logout()
    {
        UserState.ClearUser();
        NavigationManager.NavigateTo("/login");
    }
}