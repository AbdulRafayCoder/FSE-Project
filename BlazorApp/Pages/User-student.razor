@page "/user-student"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject BlazorApp.Services.UserState UserState
@inject HttpClient Http

<style>
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #1d1d1d;
        color: white;
        padding: 10px 20px;
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar a.active {
        background-color: #ddd;
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
        position: relative;
    }

    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    .card-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* Three columns */
        gap: 20px; /* Space between boxes */
        padding: 10px;
        margin-bottom: 20px;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .profile-box {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.05);
    }

    .profile-box.large {
        grid-column: span 3; /* Full width */
    }

    .profile-box.medium {
        grid-column: span 2; /* Two columns wide */
    }

    .profile-box.small {
        grid-column: span 1; /* One column wide */
    }

    .profile-box h2 {
        font-size: 1.8em;
        margin-bottom: 10px;
        color: #333;
    }

    .profile-box p {
        font-size: 1.1em;
        color: #555;
        margin-bottom: 8px;
        text-shadow: none;
    }
</style>

<div class="main-container">
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home-student">BookTech Digital</a>
        </div>
        <span>Logged in as: Student</span>
    </div>

    <div class="page_container">
        <div class="sidebar">
            <div>
                <a href="/home-student">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-student">Catalog</a>
                <a href="/requests-student">Requests</a>
                <a class="active" href="/user-student">User</a>
                <a href="/challan-student">Challan</a>
                <a href="/student-review">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <div class="content-area">
            <div class="hero">
                <h1>Student Dashboard - User Profile</h1>
                <p>View your account details below.</p>
            </div>

            <div class="card-container">
                <div class="profile-box large">
                    <h2>@UserState.Email</h2>
                    <p><strong>Role:</strong> Student</p>
                </div>
                <div class="profile-box small">
                    <p><strong>Books Borrowed:</strong> @BooksBorrowed</p>
                </div>
                <div class="profile-box small">
                    <p><strong>Books Returned:</strong> @BooksReturned</p>
                </div>
                <div class="profile-box small">
                    <p><strong>Books Overdue:</strong> @BooksOverdue</p>
                </div>
                <div class="profile-box small">
                    <p><strong>Challans Issued:</strong> @ChallansIssued</p>
                </div>
                <div class="profile-box medium">
                    <p><strong>Pending Requests:</strong> @PendingRequests</p>
                </div>
                <div class="profile-box medium">
                    <p><strong>Pending Reviews:</strong> @PendingReviews</p>
                </div>
                <div class="profile-box small">
                    <p><strong>Reviews Made:</strong> @ReviewsMade</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int BooksBorrowed = 0;
    private int BooksReturned = 0;
    private int PendingRequests = 0;
    private int PendingReviews = 0;
    private int ReviewsMade = 0;
    private int BooksOverdue = 0;
    private int ChallansIssued = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userEmail = UserState.Email;

            // Fetch user statistics from the backend
            var stats = await Http.GetFromJsonAsync<UserStats>($"http://localhost:5000/user/stats/{userEmail}");
            if (stats != null)
            {
                BooksBorrowed = stats.BooksBorrowed;
                BooksReturned = stats.BooksReturned;
                PendingRequests = stats.PendingRequests;
                PendingReviews = stats.PendingReviews;
                ReviewsMade = stats.ReviewsMade;
                BooksOverdue = stats.BooksOverdue;
                ChallansIssued = stats.ChallansIssued;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user stats: {ex.Message}");
        }
    }

    private void Logout()
    {
        UserState.ClearUser();
        NavigationManager.NavigateTo("/login");
    }

    private class UserStats
    {
        public int BooksBorrowed { get; set; }
        public int BooksReturned { get; set; }
        public int PendingRequests { get; set; }
        public int PendingReviews { get; set; }
        public int ReviewsMade { get; set; }
        public int BooksOverdue { get; set; }
        public int ChallansIssued { get; set; }
    }
}