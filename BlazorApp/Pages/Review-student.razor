@page "/student-review"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject BlazorApp.Services.UserState UserState
@inject IJSRuntime JS

<style>
    /* Styling kept same */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000; /* Backdrop z-index */
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    z-index: 1001; /* Ensure this is on top of the backdrop */
    display: block; /* Ensure it's visible */
    visibility: visible; /* Ensure it's visible */
}

.modal h2 {
    margin-top: 0;
}

.modal textarea {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    margin-top: 10px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.modal-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

.modal-buttons button {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.modal-buttons .submit {
    background-color: #007bff;
    color: white;
}

.modal-buttons .cancel {
    background-color: #ccc;
    color: black;
}

    .review-card {
        width: 100%; /* Full width of the container */
        min-height: 140px; /* Ensure a consistent minimum height */
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px; /* Add padding for content */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column; /* Align content vertically */
        justify-content: center; /* Center content vertically */
        animation: fadeIn 0.5s ease-in-out;
    }

    .review-card h3 {
        font-size: 1.5em;
        color: #333;
        margin-bottom: 10px;
    }

    .review-card p {
        font-size: 1em;
        color: #555;
        margin: 5px 0;
    }

    .review-card button {
        width: 100%; /* Stretch button to match card width */
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #007bff; /* Standardize to blue */
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        margin-top: 10px;
    }

    .review-card button:hover {
        transform: scale(1.05);
        background-color: #0056b3; /* Darker blue on hover */
    }

    .card-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 15px; /* Add consistent spacing between cards */
        overflow-y: auto; /* Allow vertical scrolling */
        overflow-x: hidden;
        padding: 10px;
        margin-bottom: 20px;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle inner shadow for distinction */
    }

     /* Main container for the entire page */
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    /* Top Bar (Header) */
    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Space between logo and user info */
        background-color: #1d1d1d; /* Dark gray */
        color: white;
        padding: 10px 20px; /* Increased padding */
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2); /* Added shadow */
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px; /* Small logo for the top bar */
        width: auto;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    /* Page Container */
    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    /* Content Area */
    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
    }

    /* Hero Section */
    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    /* Feature Cards */
    .features {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }

    .feature-card {
        flex: 1 1 calc(33.333% - 20px);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        animation: fadeIn 0.5s ease-in-out;
    }

    .feature-card:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .feature-card h3 {
        font-size: 1.5em;
        color: #333;
        margin-bottom: 10px;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .feature-card p {
        font-size: 1em;
        color: #555;
        text-shadow: none; /* Remove shadows from paragraph text */
    }

    .feature-card button {
        padding: 10px 20px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .feature-card button:hover {
        transform: scale(1.05);
        background-color: #0056b3;
    }
</style>

<div class="main-container">
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home-student">BookTech Digital</a>
        </div>
        <span>Logged in as: Student</span>
    </div>

    <div class="page_container">

        <div class="sidebar">
            <div>
                <a href="/home-student">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-student">Catalog</a>
                <a href="/requests-student">Requests</a>
                <a href="/user-student">User</a> 
                <a href="/challan-student">Challan</a>
                <a class="active" href="/student-review">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <div class="content-area">
            <div class="hero">
                <h1>Student Dashboard - Reviews</h1>
                <p>Leave reviews for the books you've borrowed.</p>
            </div>

            <div class="card-container">
                @if (booksToReview.Count == 0)
                {
                    <p>You've reviewed all your books. Great job!</p>
                }
                else
                {
                    @foreach (var book in booksToReview)
                    {
                        <div class="review-card">
                            <h3>@book.bookName</h3>
                            <p><strong>Author:</strong> @book.writeName</p>
                            <p><strong>Published:</strong> @book.publishDate</p>
                            <button @onclick="() => OpenReviewModal(book)">Leave a Review</button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@if (showModal && selectedBook != null)
{
    <div class="modal-backdrop">
        <div class="modal">
            <h2>Review for: @selectedBook.bookName</h2>
            <textarea @bind="reviewText" placeholder="Write your review here..."></textarea>

            <!-- Rating input -->
            <div class="mb-4">
                <label for="rating" class="block text-sm font-medium text-gray-700">Rating (1-5)</label>
                <input type="number" id="rating" @bind="rating" min="1" max="5" step="1" class="w-full p-2 border border-gray-300 rounded mt-2" placeholder="Rate the book from 1 to 5" />
            </div>

            <div class="modal-buttons">
                <button class="cancel" @onclick="CloseModal">Cancel</button>
                <button class="submit" @onclick="SubmitReview">Submit</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Book> booksToReview = new();
    private Book? selectedBook;
    private string reviewText = "";
    private int rating = 0;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            booksToReview = await Http.GetFromJsonAsync<List<Book>>($"http://localhost:5000/books/user/{UserState.Email}/not-reviewed") ?? new();
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "Failed to load books to review.");
        }
    }

    private void OpenReviewModal(Book book)
    {
        selectedBook = book;
        reviewText = "";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedBook = null;
    }

    private async Task SubmitReview()
    {
        if (!string.IsNullOrWhiteSpace(reviewText) && selectedBook != null)
        {
            var review = new ReviewPayload
            {
                BookId = selectedBook.bookId,
                UserEmail = UserState.Email,
                Comment = reviewText , 
                Rating = rating,
                LendId = selectedBook.id
            };

            var response = await Http.PostAsJsonAsync("http://localhost:5000/books/review", review);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Review submitted successfully!");
                showModal = false;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to submit review.");
            }
        }
    }

    private void Logout()
    {
        UserState.ClearUser();
        NavigationManager.NavigateTo("/login");
    }

    public class Book
    {
        public int id { get; set; }
        public int bookId { get; set; }
        public string bookName { get; set; } = string.Empty;
        public string writeName { get; set; } = string.Empty;
        public string publishDate { get; set; } = string.Empty;
    }

    public class ReviewPayload
{
    public int BookId { get; set; }
    public string UserEmail { get; set; }  // Add this property
    public string Comment { get; set; }    // Add this property
    public int Rating { get; set; }        // Add this property
    public int LendId { get; set; } 
}
}
