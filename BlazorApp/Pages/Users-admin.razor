@page "/users-admin"
@using FSEBACKEND.Models
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject BlazorApp.Services.UserState UserState

<style>
    /* Main container for the entire page */
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    /* Top Bar (Header) */
    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Space between logo and user info */
        background-color: #1d1d1d; /* Dark gray */
        color: white;
        padding: 10px 20px;
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px;
        width: auto;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    /* Page Container */
    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar a.active {
        background-color: #ddd;
    }

    .sidebar .logout {
        color: black;
        font-size: 1.2em;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .sidebar .logout:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    /* Content Area */
    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
        position: relative;
    }

    /* Hero Section */
    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    .forms-container {
        flex: 1;
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto; /* Make requests section scrollable */
        overflow-x: hidden;
        padding: 10px;
        height: calc(100% - 140px); /* Adjust height so it ends above any fixed elements */
        margin-bottom: 20px; /* Space above any fixed elements */
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle inner shadow for distinction */
        justify-content: center; /* Center forms horizontally */
        align-items: center; /* Center forms vertically */
    }

    .form-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        max-width: 400px;
        text-align: center;
    }

    .form-container h1 {
        font-size: 1.5em; /* Match requests card title size */
        margin-bottom: 20px;
        color: #333;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .form-container input {
        width: 100%;
        padding: 10px;
        font-size: 1em;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 15px;
        box-sizing: border-box;
        text-shadow: none; /* Remove shadows from input text */
    }

    .form-container button {
        width: 100%; /* Stretch button to match container width */
        padding: 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        background-color: #28a745; /* Standardize to green */
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .form-container button:hover {
        transform: scale(1.05);
        background-color: #218838; /* Darker green on hover */
    }

    .filter-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .filter-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.2s ease;
        width: 140px; /* Ensures all buttons are the same size */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .filter-buttons button.add-user {
        background: linear-gradient(135deg, #28a745, #218838); /* Green gradient */
        color: white;
    }

    .filter-buttons button.add-user:hover {
        transform: scale(1.05);
    }

    .filter-buttons button.delete-user {
        background: linear-gradient(135deg, #dc3545, #c82333); /* Red gradient */
        color: white;
    }

    .filter-buttons button.delete-user:hover {
        transform: scale(1.05);
    }
</style>

<div class="main-container">
    <!-- Top Bar -->
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home-admin">BookTech Digital</a>
        </div>
        <span>Logged in as: Admin</span>
    </div>

    <!-- Page Container -->
    <div class="page_container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div>
                <a href="/home-admin">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog-admin">Catalog</a>
                <a href="/requests-admin">Requests</a>
                <a class="active" href="/users-admin">Users</a>
                <a href="/challan-admin">Challan</a>
                <a href="/review-admin">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Hero Section -->
            <div class="hero">
                <h1>User Management</h1>
                <p>Manage user accounts, add new users, and oversee user roles in the system.</p>
            </div>

            <!-- Toggle Buttons -->
            <div class="filter-buttons">
                <button class="add-user" @onclick="ShowAddUserForm">Add User</button>
                <button class="delete-user" @onclick="ShowDeleteUserForm">Delete User</button>
            </div>

            <!-- Forms Container -->
            <div class="forms-container">
                @if (showAddUserForm)
                {
                    <div class="form-container">
                        <h1>Add User</h1>
                        <input placeholder="Email" @bind="newUserEmail" />
                        <input type="password" placeholder="Password" @bind="newUserPassword" />
                        <button @onclick="AddUser">Add</button>
                    </div>
                }
                else if (showDeleteUserForm)
                {
                    <div class="form-container">
                        <h1>Delete User</h1>
                        <input placeholder="Email" @bind="deleteUserEmail" />
                        <button @onclick="DeleteUser">Delete</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string newUserEmail = "";
    private string newUserPassword = "";
    private string deleteUserEmail = "";
    private bool showAddUserForm = true;
    private bool showDeleteUserForm = false;

    private void ShowAddUserForm()
    {
        showAddUserForm = true;
        showDeleteUserForm = false;
    }

    private void ShowDeleteUserForm()
    {
        showAddUserForm = false;
        showDeleteUserForm = true;
    }

    private async Task AddUser()
    {
        var addUserRequest = new AddUserRequest(newUserEmail, newUserPassword);
        var response = await Http.PostAsJsonAsync("http://localhost:5000/adduser", addUserRequest);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AddUserResponse>();
            if (result != null && result.Status == "User added")
            {
                await JSRuntime.InvokeVoidAsync("alert", "User added successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to add user.");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please fill out all fields correctly.");
        }
    }

    private async Task DeleteUser()
    {
        var response = await Http.DeleteAsync($"http://localhost:5000/users/{deleteUserEmail}");
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to delete user.");
        }
    }

    public record AddUserRequest(string Email, string Password);
    public record AddUserResponse(string Status, User? User);
    public record User(string Email, string Password, string Role);

    private void Logout()
    {
        UserState.ClearUser();
        NavigationManager.NavigateTo("/login");
    }
}