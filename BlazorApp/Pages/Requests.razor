@page "/requests"
@using FSEBACKEND.Models
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    .top-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #1d1d1d;
        color: white;
        padding: 10px 20px;
        box-sizing: border-box;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .top-bar .logo-container {
        display: flex;
        align-items: center;
    }

    .top-bar .logo-container img {
        height: 30px;
        margin-right: 10px;
    }

    .top-bar .logo-container a {
        font-size: 1.7em;
        font-weight: bold;
        color: white;
        text-decoration: none;
        transition: transform 0.2s ease, color 0.2s ease;
    }

    .top-bar .logo-container a:hover {
        transform: scale(1.05);
        color: #ddd;
    }

    .top-bar span {
        font-size: 1em;
        color: #ddd;
        font-weight: bold;
    }

    .page_container {
        display: flex;
        flex: 1;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
    }

    .sidebar {
        flex: 1;
        background-color: black;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar img {
        max-width: 100%;
        margin-bottom: 20px;
    }

    .sidebar a {
        color: black;
        margin: 15px 0;
        font-size: 1.2em;
        display: block;
        text-align: center;
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
    }

    .sidebar a:hover {
        text-decoration: none;
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .sidebar a.active {
        background-color: #ddd;
    }

    .sidebar .logout {
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        margin-top: auto;
        text-align: center;
        padding: 10px;
        background-color: white;
        color: black;
        border-radius: 5px;
        width: 100%;
        box-sizing: border-box;
        transition: transform 0.2s ease, background-color 0.2s ease;
    }

    .sidebar .logout:hover {
        transform: scale(1.05);
        background-color: #f0f0f0;
    }

    .content-area {
        flex: 7;
        padding: 20px;
        background-color: #f5f5f5;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        overflow-y: auto;
        position: relative;
    }

    .hero {
        background: linear-gradient(135deg, #4b79a1, #283e51);
        color: white;
        padding: 40px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
    }

    .hero h1 {
        font-size: 3em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        line-height: 1.6;
    }

    .requests-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto;
        padding: 10px;
    }

    .request-card {
        flex: 1 1 calc(33.333% - 20px);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .request-card:hover {
        transform: scale(1.03);
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    .request-card h3 {
        font-size: 1.2em;
        color: #333;
        margin-bottom: 10px;
    }

    .request-card p {
        font-size: 0.9em;
        color: #555;
        margin-bottom: 10px;
    }

    .request-card button {
        padding: 6px 12px;
        font-size: 0.8em;
        border: none;
        border-radius: 5px;
        margin-right: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .request-card button.accept {
        background-color: #28a745;
        color: white;
    }

    .request-card button.accept:hover {
        background-color: #218838;
    }

    .request-card button.decline {
        background-color: #dc3545;
        color: white;
    }

    .request-card button.decline:hover {
        background-color: #c82333;
    }
</style>

<div class="main-container">
    <!-- Top Bar -->
    <div class="top-bar">
        <div class="logo-container">
            <img src="images/logo.png" alt="Top Logo" />
            <a href="/home">BookTech Digital</a>
        </div>
        <span>Logged in as: Admin</span>
    </div>

    <!-- Page Container -->
    <div class="page_container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div>
                <a href="/home">
                    <img src="images/logo.png" alt="Logo" />
                </a>
                <a href="/catalog">Catalog</a>
                <a class="active" href="/requests">Requests</a>
                <a href="/users">Users</a>
                <a href="#">Challan</a>
                <a href="#">Reviews</a>
            </div>
            <div class="logout" @onclick="Logout">
                <span>Log Out</span>
            </div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Hero Section -->
            <div class="hero">
                <h1>Borrowing Requests</h1>
                <p>Review all incoming book borrowing requests. Accept or decline as needed.</p>
            </div>
            <!-- Requests Container -->
            <div class="requests-container">
                @if (requests != null && requests.Any())
                {
                    @foreach (var req in requests)
                    {
                        <div class="request-card">
                            <h3>Book ID: @req.BookId</h3>
                            <p><strong>User:</strong> @req.Email</p>
                            <p><strong>Status:</strong> @(req.Accepted ? "Accepted" : "Pending")</p>
                            @if (!req.Accepted)
                            {
                                <button class="accept" @onclick="() => AcceptRequest(req)">Accept</button>
                                <button class="decline" @onclick="() => DeclineRequest(req)">Decline</button>
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No requests found.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<RequestModel> requests = new List<RequestModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        requests = await Http.GetFromJsonAsync<List<RequestModel>>("http://localhost:5000/requests") 
                   ?? new List<RequestModel>();
    }

    private async Task AcceptRequest(RequestModel req)
    {
        // Update the request (mark as accepted)
        req.Accepted = true;
        var response = await Http.PutAsJsonAsync($"http://localhost:5000/requests/{req.Id}", req);
        if(response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Request accepted!");
            await LoadRequests();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to accept request.");
        }
    }

    private async Task DeclineRequest(RequestModel req)
    {
        // Delete the request from the backend.
        var response = await Http.DeleteAsync($"http://localhost:5000/requests/{req.Id}");
        if(response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Request declined!");
            await LoadRequests();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to decline request.");
        }
    }

    public class RequestModel
    {
        public int Id { get; set; }
        public int BookId { get; set; }
        public string Email { get; set; } = string.Empty;
        public bool Accepted { get; set; }
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/login");
    }
}